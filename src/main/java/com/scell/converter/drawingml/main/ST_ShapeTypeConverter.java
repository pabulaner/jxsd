package com.scell.converter.drawingml.main;

import com.scell.model.drawingml.main.ST_ShapeTypeModel;
import org.docx4j.dml.STShapeType;

public class ST_ShapeTypeConverter {
  private ST_ShapeTypeConverter() {
  }

  public static ST_ShapeTypeModel fromDocx4j(STShapeType value) {
    if (value == null) return null;
    if (value == STShapeType.LINE) return ST_ShapeTypeModel.LINE;
    if (value == STShapeType.LINE_INV) return ST_ShapeTypeModel.LINE_INV;
    if (value == STShapeType.TRIANGLE) return ST_ShapeTypeModel.TRIANGLE;
    if (value == STShapeType.RT_TRIANGLE) return ST_ShapeTypeModel.RT_TRIANGLE;
    if (value == STShapeType.RECT) return ST_ShapeTypeModel.RECT;
    if (value == STShapeType.DIAMOND) return ST_ShapeTypeModel.DIAMOND;
    if (value == STShapeType.PARALLELOGRAM) return ST_ShapeTypeModel.PARALLELOGRAM;
    if (value == STShapeType.TRAPEZOID) return ST_ShapeTypeModel.TRAPEZOID;
    if (value == STShapeType.NON_ISOSCELES_TRAPEZOID) return ST_ShapeTypeModel.NON_ISOSCELES_TRAPEZOID;
    if (value == STShapeType.PENTAGON) return ST_ShapeTypeModel.PENTAGON;
    if (value == STShapeType.HEXAGON) return ST_ShapeTypeModel.HEXAGON;
    if (value == STShapeType.HEPTAGON) return ST_ShapeTypeModel.HEPTAGON;
    if (value == STShapeType.OCTAGON) return ST_ShapeTypeModel.OCTAGON;
    if (value == STShapeType.DECAGON) return ST_ShapeTypeModel.DECAGON;
    if (value == STShapeType.DODECAGON) return ST_ShapeTypeModel.DODECAGON;
    if (value == STShapeType.STAR4) return ST_ShapeTypeModel.STAR4;
    if (value == STShapeType.STAR5) return ST_ShapeTypeModel.STAR5;
    if (value == STShapeType.STAR6) return ST_ShapeTypeModel.STAR6;
    if (value == STShapeType.STAR7) return ST_ShapeTypeModel.STAR7;
    if (value == STShapeType.STAR8) return ST_ShapeTypeModel.STAR8;
    if (value == STShapeType.STAR10) return ST_ShapeTypeModel.STAR10;
    if (value == STShapeType.STAR12) return ST_ShapeTypeModel.STAR12;
    if (value == STShapeType.STAR16) return ST_ShapeTypeModel.STAR16;
    if (value == STShapeType.STAR24) return ST_ShapeTypeModel.STAR24;
    if (value == STShapeType.STAR32) return ST_ShapeTypeModel.STAR32;
    if (value == STShapeType.ROUND_RECT) return ST_ShapeTypeModel.ROUND_RECT;
    if (value == STShapeType.ROUND1_RECT) return ST_ShapeTypeModel.ROUND1_RECT;
    if (value == STShapeType.ROUND2_SAME_RECT) return ST_ShapeTypeModel.ROUND2_SAME_RECT;
    if (value == STShapeType.ROUND2_DIAG_RECT) return ST_ShapeTypeModel.ROUND2_DIAG_RECT;
    if (value == STShapeType.SNIP_ROUND_RECT) return ST_ShapeTypeModel.SNIP_ROUND_RECT;
    if (value == STShapeType.SNIP1_RECT) return ST_ShapeTypeModel.SNIP1_RECT;
    if (value == STShapeType.SNIP2_SAME_RECT) return ST_ShapeTypeModel.SNIP2_SAME_RECT;
    if (value == STShapeType.SNIP2_DIAG_RECT) return ST_ShapeTypeModel.SNIP2_DIAG_RECT;
    if (value == STShapeType.PLAQUE) return ST_ShapeTypeModel.PLAQUE;
    if (value == STShapeType.ELLIPSE) return ST_ShapeTypeModel.ELLIPSE;
    if (value == STShapeType.TEARDROP) return ST_ShapeTypeModel.TEARDROP;
    if (value == STShapeType.HOME_PLATE) return ST_ShapeTypeModel.HOME_PLATE;
    if (value == STShapeType.CHEVRON) return ST_ShapeTypeModel.CHEVRON;
    if (value == STShapeType.PIE_WEDGE) return ST_ShapeTypeModel.PIE_WEDGE;
    if (value == STShapeType.PIE) return ST_ShapeTypeModel.PIE;
    if (value == STShapeType.BLOCK_ARC) return ST_ShapeTypeModel.BLOCK_ARC;
    if (value == STShapeType.DONUT) return ST_ShapeTypeModel.DONUT;
    if (value == STShapeType.NO_SMOKING) return ST_ShapeTypeModel.NO_SMOKING;
    if (value == STShapeType.RIGHT_ARROW) return ST_ShapeTypeModel.RIGHT_ARROW;
    if (value == STShapeType.LEFT_ARROW) return ST_ShapeTypeModel.LEFT_ARROW;
    if (value == STShapeType.UP_ARROW) return ST_ShapeTypeModel.UP_ARROW;
    if (value == STShapeType.DOWN_ARROW) return ST_ShapeTypeModel.DOWN_ARROW;
    if (value == STShapeType.STRIPED_RIGHT_ARROW) return ST_ShapeTypeModel.STRIPED_RIGHT_ARROW;
    if (value == STShapeType.NOTCHED_RIGHT_ARROW) return ST_ShapeTypeModel.NOTCHED_RIGHT_ARROW;
    if (value == STShapeType.BENT_UP_ARROW) return ST_ShapeTypeModel.BENT_UP_ARROW;
    if (value == STShapeType.LEFT_RIGHT_ARROW) return ST_ShapeTypeModel.LEFT_RIGHT_ARROW;
    if (value == STShapeType.UP_DOWN_ARROW) return ST_ShapeTypeModel.UP_DOWN_ARROW;
    if (value == STShapeType.LEFT_UP_ARROW) return ST_ShapeTypeModel.LEFT_UP_ARROW;
    if (value == STShapeType.LEFT_RIGHT_UP_ARROW) return ST_ShapeTypeModel.LEFT_RIGHT_UP_ARROW;
    if (value == STShapeType.QUAD_ARROW) return ST_ShapeTypeModel.QUAD_ARROW;
    if (value == STShapeType.LEFT_ARROW_CALLOUT) return ST_ShapeTypeModel.LEFT_ARROW_CALLOUT;
    if (value == STShapeType.RIGHT_ARROW_CALLOUT) return ST_ShapeTypeModel.RIGHT_ARROW_CALLOUT;
    if (value == STShapeType.UP_ARROW_CALLOUT) return ST_ShapeTypeModel.UP_ARROW_CALLOUT;
    if (value == STShapeType.DOWN_ARROW_CALLOUT) return ST_ShapeTypeModel.DOWN_ARROW_CALLOUT;
    if (value == STShapeType.LEFT_RIGHT_ARROW_CALLOUT) return ST_ShapeTypeModel.LEFT_RIGHT_ARROW_CALLOUT;
    if (value == STShapeType.UP_DOWN_ARROW_CALLOUT) return ST_ShapeTypeModel.UP_DOWN_ARROW_CALLOUT;
    if (value == STShapeType.QUAD_ARROW_CALLOUT) return ST_ShapeTypeModel.QUAD_ARROW_CALLOUT;
    if (value == STShapeType.BENT_ARROW) return ST_ShapeTypeModel.BENT_ARROW;
    if (value == STShapeType.UTURN_ARROW) return ST_ShapeTypeModel.UTURN_ARROW;
    if (value == STShapeType.CIRCULAR_ARROW) return ST_ShapeTypeModel.CIRCULAR_ARROW;
    if (value == STShapeType.LEFT_CIRCULAR_ARROW) return ST_ShapeTypeModel.LEFT_CIRCULAR_ARROW;
    if (value == STShapeType.LEFT_RIGHT_CIRCULAR_ARROW) return ST_ShapeTypeModel.LEFT_RIGHT_CIRCULAR_ARROW;
    if (value == STShapeType.CURVED_RIGHT_ARROW) return ST_ShapeTypeModel.CURVED_RIGHT_ARROW;
    if (value == STShapeType.CURVED_LEFT_ARROW) return ST_ShapeTypeModel.CURVED_LEFT_ARROW;
    if (value == STShapeType.CURVED_UP_ARROW) return ST_ShapeTypeModel.CURVED_UP_ARROW;
    if (value == STShapeType.CURVED_DOWN_ARROW) return ST_ShapeTypeModel.CURVED_DOWN_ARROW;
    if (value == STShapeType.SWOOSH_ARROW) return ST_ShapeTypeModel.SWOOSH_ARROW;
    if (value == STShapeType.CUBE) return ST_ShapeTypeModel.CUBE;
    if (value == STShapeType.CAN) return ST_ShapeTypeModel.CAN;
    if (value == STShapeType.LIGHTNING_BOLT) return ST_ShapeTypeModel.LIGHTNING_BOLT;
    if (value == STShapeType.HEART) return ST_ShapeTypeModel.HEART;
    if (value == STShapeType.SUN) return ST_ShapeTypeModel.SUN;
    if (value == STShapeType.MOON) return ST_ShapeTypeModel.MOON;
    if (value == STShapeType.SMILEY_FACE) return ST_ShapeTypeModel.SMILEY_FACE;
    if (value == STShapeType.IRREGULAR_SEAL1) return ST_ShapeTypeModel.IRREGULAR_SEAL1;
    if (value == STShapeType.IRREGULAR_SEAL2) return ST_ShapeTypeModel.IRREGULAR_SEAL2;
    if (value == STShapeType.FOLDED_CORNER) return ST_ShapeTypeModel.FOLDED_CORNER;
    if (value == STShapeType.BEVEL) return ST_ShapeTypeModel.BEVEL;
    if (value == STShapeType.FRAME) return ST_ShapeTypeModel.FRAME;
    if (value == STShapeType.HALF_FRAME) return ST_ShapeTypeModel.HALF_FRAME;
    if (value == STShapeType.CORNER) return ST_ShapeTypeModel.CORNER;
    if (value == STShapeType.DIAG_STRIPE) return ST_ShapeTypeModel.DIAG_STRIPE;
    if (value == STShapeType.CHORD) return ST_ShapeTypeModel.CHORD;
    if (value == STShapeType.ARC) return ST_ShapeTypeModel.ARC;
    if (value == STShapeType.LEFT_BRACKET) return ST_ShapeTypeModel.LEFT_BRACKET;
    if (value == STShapeType.RIGHT_BRACKET) return ST_ShapeTypeModel.RIGHT_BRACKET;
    if (value == STShapeType.LEFT_BRACE) return ST_ShapeTypeModel.LEFT_BRACE;
    if (value == STShapeType.RIGHT_BRACE) return ST_ShapeTypeModel.RIGHT_BRACE;
    if (value == STShapeType.BRACKET_PAIR) return ST_ShapeTypeModel.BRACKET_PAIR;
    if (value == STShapeType.BRACE_PAIR) return ST_ShapeTypeModel.BRACE_PAIR;
    if (value == STShapeType.STRAIGHT_CONNECTOR1) return ST_ShapeTypeModel.STRAIGHT_CONNECTOR1;
    if (value == STShapeType.BENT_CONNECTOR2) return ST_ShapeTypeModel.BENT_CONNECTOR2;
    if (value == STShapeType.BENT_CONNECTOR3) return ST_ShapeTypeModel.BENT_CONNECTOR3;
    if (value == STShapeType.BENT_CONNECTOR4) return ST_ShapeTypeModel.BENT_CONNECTOR4;
    if (value == STShapeType.BENT_CONNECTOR5) return ST_ShapeTypeModel.BENT_CONNECTOR5;
    if (value == STShapeType.CURVED_CONNECTOR2) return ST_ShapeTypeModel.CURVED_CONNECTOR2;
    if (value == STShapeType.CURVED_CONNECTOR3) return ST_ShapeTypeModel.CURVED_CONNECTOR3;
    if (value == STShapeType.CURVED_CONNECTOR4) return ST_ShapeTypeModel.CURVED_CONNECTOR4;
    if (value == STShapeType.CURVED_CONNECTOR5) return ST_ShapeTypeModel.CURVED_CONNECTOR5;
    if (value == STShapeType.CALLOUT1) return ST_ShapeTypeModel.CALLOUT1;
    if (value == STShapeType.CALLOUT2) return ST_ShapeTypeModel.CALLOUT2;
    if (value == STShapeType.CALLOUT3) return ST_ShapeTypeModel.CALLOUT3;
    if (value == STShapeType.ACCENT_CALLOUT1) return ST_ShapeTypeModel.ACCENT_CALLOUT1;
    if (value == STShapeType.ACCENT_CALLOUT2) return ST_ShapeTypeModel.ACCENT_CALLOUT2;
    if (value == STShapeType.ACCENT_CALLOUT3) return ST_ShapeTypeModel.ACCENT_CALLOUT3;
    if (value == STShapeType.BORDER_CALLOUT1) return ST_ShapeTypeModel.BORDER_CALLOUT1;
    if (value == STShapeType.BORDER_CALLOUT2) return ST_ShapeTypeModel.BORDER_CALLOUT2;
    if (value == STShapeType.BORDER_CALLOUT3) return ST_ShapeTypeModel.BORDER_CALLOUT3;
    if (value == STShapeType.ACCENT_BORDER_CALLOUT1) return ST_ShapeTypeModel.ACCENT_BORDER_CALLOUT1;
    if (value == STShapeType.ACCENT_BORDER_CALLOUT2) return ST_ShapeTypeModel.ACCENT_BORDER_CALLOUT2;
    if (value == STShapeType.ACCENT_BORDER_CALLOUT3) return ST_ShapeTypeModel.ACCENT_BORDER_CALLOUT3;
    if (value == STShapeType.WEDGE_RECT_CALLOUT) return ST_ShapeTypeModel.WEDGE_RECT_CALLOUT;
    if (value == STShapeType.WEDGE_ROUND_RECT_CALLOUT) return ST_ShapeTypeModel.WEDGE_ROUND_RECT_CALLOUT;
    if (value == STShapeType.WEDGE_ELLIPSE_CALLOUT) return ST_ShapeTypeModel.WEDGE_ELLIPSE_CALLOUT;
    if (value == STShapeType.CLOUD_CALLOUT) return ST_ShapeTypeModel.CLOUD_CALLOUT;
    if (value == STShapeType.CLOUD) return ST_ShapeTypeModel.CLOUD;
    if (value == STShapeType.RIBBON) return ST_ShapeTypeModel.RIBBON;
    if (value == STShapeType.RIBBON2) return ST_ShapeTypeModel.RIBBON2;
    if (value == STShapeType.ELLIPSE_RIBBON) return ST_ShapeTypeModel.ELLIPSE_RIBBON;
    if (value == STShapeType.ELLIPSE_RIBBON2) return ST_ShapeTypeModel.ELLIPSE_RIBBON2;
    if (value == STShapeType.LEFT_RIGHT_RIBBON) return ST_ShapeTypeModel.LEFT_RIGHT_RIBBON;
    if (value == STShapeType.VERTICAL_SCROLL) return ST_ShapeTypeModel.VERTICAL_SCROLL;
    if (value == STShapeType.HORIZONTAL_SCROLL) return ST_ShapeTypeModel.HORIZONTAL_SCROLL;
    if (value == STShapeType.WAVE) return ST_ShapeTypeModel.WAVE;
    if (value == STShapeType.DOUBLE_WAVE) return ST_ShapeTypeModel.DOUBLE_WAVE;
    if (value == STShapeType.PLUS) return ST_ShapeTypeModel.PLUS;
    if (value == STShapeType.FLOW_CHART_PROCESS) return ST_ShapeTypeModel.FLOW_CHART_PROCESS;
    if (value == STShapeType.FLOW_CHART_DECISION) return ST_ShapeTypeModel.FLOW_CHART_DECISION;
    if (value == STShapeType.FLOW_CHART_INPUT_OUTPUT) return ST_ShapeTypeModel.FLOW_CHART_INPUT_OUTPUT;
    if (value == STShapeType.FLOW_CHART_PREDEFINED_PROCESS) return ST_ShapeTypeModel.FLOW_CHART_PREDEFINED_PROCESS;
    if (value == STShapeType.FLOW_CHART_INTERNAL_STORAGE) return ST_ShapeTypeModel.FLOW_CHART_INTERNAL_STORAGE;
    if (value == STShapeType.FLOW_CHART_DOCUMENT) return ST_ShapeTypeModel.FLOW_CHART_DOCUMENT;
    if (value == STShapeType.FLOW_CHART_MULTIDOCUMENT) return ST_ShapeTypeModel.FLOW_CHART_MULTIDOCUMENT;
    if (value == STShapeType.FLOW_CHART_TERMINATOR) return ST_ShapeTypeModel.FLOW_CHART_TERMINATOR;
    if (value == STShapeType.FLOW_CHART_PREPARATION) return ST_ShapeTypeModel.FLOW_CHART_PREPARATION;
    if (value == STShapeType.FLOW_CHART_MANUAL_INPUT) return ST_ShapeTypeModel.FLOW_CHART_MANUAL_INPUT;
    if (value == STShapeType.FLOW_CHART_MANUAL_OPERATION) return ST_ShapeTypeModel.FLOW_CHART_MANUAL_OPERATION;
    if (value == STShapeType.FLOW_CHART_CONNECTOR) return ST_ShapeTypeModel.FLOW_CHART_CONNECTOR;
    if (value == STShapeType.FLOW_CHART_PUNCHED_CARD) return ST_ShapeTypeModel.FLOW_CHART_PUNCHED_CARD;
    if (value == STShapeType.FLOW_CHART_PUNCHED_TAPE) return ST_ShapeTypeModel.FLOW_CHART_PUNCHED_TAPE;
    if (value == STShapeType.FLOW_CHART_SUMMING_JUNCTION) return ST_ShapeTypeModel.FLOW_CHART_SUMMING_JUNCTION;
    if (value == STShapeType.FLOW_CHART_OR) return ST_ShapeTypeModel.FLOW_CHART_OR;
    if (value == STShapeType.FLOW_CHART_COLLATE) return ST_ShapeTypeModel.FLOW_CHART_COLLATE;
    if (value == STShapeType.FLOW_CHART_SORT) return ST_ShapeTypeModel.FLOW_CHART_SORT;
    if (value == STShapeType.FLOW_CHART_EXTRACT) return ST_ShapeTypeModel.FLOW_CHART_EXTRACT;
    if (value == STShapeType.FLOW_CHART_MERGE) return ST_ShapeTypeModel.FLOW_CHART_MERGE;
    if (value == STShapeType.FLOW_CHART_OFFLINE_STORAGE) return ST_ShapeTypeModel.FLOW_CHART_OFFLINE_STORAGE;
    if (value == STShapeType.FLOW_CHART_ONLINE_STORAGE) return ST_ShapeTypeModel.FLOW_CHART_ONLINE_STORAGE;
    if (value == STShapeType.FLOW_CHART_MAGNETIC_TAPE) return ST_ShapeTypeModel.FLOW_CHART_MAGNETIC_TAPE;
    if (value == STShapeType.FLOW_CHART_MAGNETIC_DISK) return ST_ShapeTypeModel.FLOW_CHART_MAGNETIC_DISK;
    if (value == STShapeType.FLOW_CHART_MAGNETIC_DRUM) return ST_ShapeTypeModel.FLOW_CHART_MAGNETIC_DRUM;
    if (value == STShapeType.FLOW_CHART_DISPLAY) return ST_ShapeTypeModel.FLOW_CHART_DISPLAY;
    if (value == STShapeType.FLOW_CHART_DELAY) return ST_ShapeTypeModel.FLOW_CHART_DELAY;
    if (value == STShapeType.FLOW_CHART_ALTERNATE_PROCESS) return ST_ShapeTypeModel.FLOW_CHART_ALTERNATE_PROCESS;
    if (value == STShapeType.FLOW_CHART_OFFPAGE_CONNECTOR) return ST_ShapeTypeModel.FLOW_CHART_OFFPAGE_CONNECTOR;
    if (value == STShapeType.ACTION_BUTTON_BLANK) return ST_ShapeTypeModel.ACTION_BUTTON_BLANK;
    if (value == STShapeType.ACTION_BUTTON_HOME) return ST_ShapeTypeModel.ACTION_BUTTON_HOME;
    if (value == STShapeType.ACTION_BUTTON_HELP) return ST_ShapeTypeModel.ACTION_BUTTON_HELP;
    if (value == STShapeType.ACTION_BUTTON_INFORMATION) return ST_ShapeTypeModel.ACTION_BUTTON_INFORMATION;
    if (value == STShapeType.ACTION_BUTTON_FORWARD_NEXT) return ST_ShapeTypeModel.ACTION_BUTTON_FORWARD_NEXT;
    if (value == STShapeType.ACTION_BUTTON_BACK_PREVIOUS) return ST_ShapeTypeModel.ACTION_BUTTON_BACK_PREVIOUS;
    if (value == STShapeType.ACTION_BUTTON_END) return ST_ShapeTypeModel.ACTION_BUTTON_END;
    if (value == STShapeType.ACTION_BUTTON_BEGINNING) return ST_ShapeTypeModel.ACTION_BUTTON_BEGINNING;
    if (value == STShapeType.ACTION_BUTTON_RETURN) return ST_ShapeTypeModel.ACTION_BUTTON_RETURN;
    if (value == STShapeType.ACTION_BUTTON_DOCUMENT) return ST_ShapeTypeModel.ACTION_BUTTON_DOCUMENT;
    if (value == STShapeType.ACTION_BUTTON_SOUND) return ST_ShapeTypeModel.ACTION_BUTTON_SOUND;
    if (value == STShapeType.ACTION_BUTTON_MOVIE) return ST_ShapeTypeModel.ACTION_BUTTON_MOVIE;
    if (value == STShapeType.GEAR6) return ST_ShapeTypeModel.GEAR6;
    if (value == STShapeType.GEAR9) return ST_ShapeTypeModel.GEAR9;
    if (value == STShapeType.FUNNEL) return ST_ShapeTypeModel.FUNNEL;
    if (value == STShapeType.MATH_PLUS) return ST_ShapeTypeModel.MATH_PLUS;
    if (value == STShapeType.MATH_MINUS) return ST_ShapeTypeModel.MATH_MINUS;
    if (value == STShapeType.MATH_MULTIPLY) return ST_ShapeTypeModel.MATH_MULTIPLY;
    if (value == STShapeType.MATH_DIVIDE) return ST_ShapeTypeModel.MATH_DIVIDE;
    if (value == STShapeType.MATH_EQUAL) return ST_ShapeTypeModel.MATH_EQUAL;
    if (value == STShapeType.MATH_NOT_EQUAL) return ST_ShapeTypeModel.MATH_NOT_EQUAL;
    if (value == STShapeType.CORNER_TABS) return ST_ShapeTypeModel.CORNER_TABS;
    if (value == STShapeType.SQUARE_TABS) return ST_ShapeTypeModel.SQUARE_TABS;
    if (value == STShapeType.PLAQUE_TABS) return ST_ShapeTypeModel.PLAQUE_TABS;
    if (value == STShapeType.CHART_X) return ST_ShapeTypeModel.CHART_X;
    if (value == STShapeType.CHART_STAR) return ST_ShapeTypeModel.CHART_STAR;
    if (value == STShapeType.CHART_PLUS) return ST_ShapeTypeModel.CHART_PLUS;
    return null;
  }

  public static STShapeType toDocx4j(ST_ShapeTypeModel value) {
    return null;
  }
}
